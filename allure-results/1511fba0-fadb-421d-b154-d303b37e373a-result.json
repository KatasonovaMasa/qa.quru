{"uuid":"1511fba0-fadb-421d-b154-d303b37e373a","historyId":"c3d32d7aec378deab2a25979ac3401b8","testCaseId":"[engine:junit-jupiter]/[class:OpenSelenideSoftAssertionsJunitTest]/[method:successfulLoginTest()]","testCaseName":"successfulLoginTest()","fullName":"OpenSelenideSoftAssertionsJunitTest.successfulLoginTest","labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:OpenSelenideSoftAssertionsJunitTest]/[method:successfulLoginTest()]"},{"name":"host","value":"DESKTOP-5ICQQV1"},{"name":"thread","value":"28272@DESKTOP-5ICQQV1.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"OpenSelenideSoftAssertionsJunitTest"},{"name":"testClass","value":"OpenSelenideSoftAssertionsJunitTest"},{"name":"testMethod","value":"successfulLoginTest"},{"name":"suite","value":"OpenSelenideSoftAssertionsJunitTest"}],"links":[],"name":"successfulLoginTest()","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"Element should have text \"Using JUnit5 extend85 test class:\" {[id=\"wiki-content\"]}\r\nElement: '<div class=\"mt-4\" id=\"wiki-content\">Pages 17\nHome\nBuild script\nCustom conditions\nDo not use getters in tests\nHow Selenide creates WebDriver\nHow to run the browser in MobileEmulation mode\nLazy loading\nPorts of Selenide\nProject structure\nQuick Start\nSafari\nSelenide Roadmap\nSelenide Roadmap 2020\nSelenide vs Selenium\nslf4j\nShow 2 more pages…\nClone this wiki locally\nHow to soft assert using Selenide\nSelenide provide point to perform built in verification softly - this mean that Selenide will skip failed verification and collect all of it and throw error only at the end of test.\nMechanisms:\nTestNG listener - com.codeborne.selenide.testng.SoftAsserts\nJUnit4 rule - com.codeborne.selenide.junit.SoftAsserts\nJUnit5 extension - com.codeborne.selenide.junit5.SoftAssertsExtension\nExample:\nPage with 2 elements, where 2 at invisible\n...\n  <div id='first' style='display:none;'>First</div>\n  <div id='second' style='display:none;'>Second</div>\n...\nAnd use code like this:\npublic class Tests {\n  @Test\n  public void test() {\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nIn normal way test fail on a first row because first item is not visible and second item will never be touched and verified.\nBut if you want to verify both items you can use Selenide soft assets. In this case Selenide will perform condition verification and then click on both of the items and it some item unavailable for some reason it will generate errors for each fail after test end.\n1. Using TestNG just register listener bypass annotation for test class:\n@Listeners({ SoftAsserts.class})\npublic class Tests {\n  @Test\n  public void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nDon't forget to use dependency \"com.codeborne:selenide-testng\" instead of just \"com.codeborne:selenide\" to use TestNG-specific classes.\n2. Using JUnit4 just describe rule inside test class:\npublic class Tests {\n  @Rule \n  public SoftAsserts softAsserts = new SoftAsserts();\n\n  @Test\n  public void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nDon't forget to use dependency \"com.codeborne:selenide-junit4\" instead of just \"com.codeborne:selenide\" to use JUnit4-specific classes.\n3. Using JUnit5 extend test class:\n@ExtendWith({SoftAssertsExtension.class})\nclass Tests {\n  @Test\n  void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nOr register extension inside test class:\nclass Tests {\n  @RegisterExtension \n  static SoftAssertsExtension softAsserts = new SoftAssertsExtension();\n\n  @Test\n  void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nYou can use the old good dependency \"com.codeborne:selenide\" because it contains JUnit5-specific classes.\nWithout soft assertions you will get report:\nElement not found {#first}\nExpected: visible\n\nScreenshot: file://build/reports/tests/1536060081565.0.png\nPage source: file://build/reports/tests/1536060081565.0.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#first\"}\nWith soft assertions you will get report:\nFAIL #1: Element not found {#first}\nExpected: visible\nScreenshot: file://build/reports/tests/1536060329615.0.png\nPage source: file://build/reports/tests/1536060329615.0.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#first\"}\n\nFAIL #2: Element not found {#second}\nExpected: visible\nScreenshot: file://build/reports/tests/1536060334390.1.png\nPage source: file://build/reports/tests/1536060334390.1.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#second\"}</div>'\r\nActual value: text=\"Pages 17\nHome\nBuild script\nCustom conditions\nDo not use getters in tests\nHow Selenide creates WebDriver\nHow to run the browser in MobileEmulation mode\nLazy loading\nPorts of Selenide\nProject structure\nQuick Start\nSafari\nSelenide Roadmap\nSelenide Roadmap 2020\nSelenide vs Selenium\nslf4j\nShow 2 more pages…\nClone this wiki locally\nHow to soft assert using Selenide\nSelenide provide point to perform built in verification softly - this mean that Selenide will skip failed verification and collect all of it and throw error only at the end of test.\nMechanisms:\nTestNG listener - com.codeborne.selenide.testng.SoftAsserts\nJUnit4 rule - com.codeborne.selenide.junit.SoftAsserts\nJUnit5 extension - com.codeborne.selenide.junit5.SoftAssertsExtension\nExample:\nPage with 2 elements, where 2 at invisible\n...\n  <div id='first' style='display:none;'>First</div>\n  <div id='second' style='display:none;'>Second</div>\n...\nAnd use code like this:\npublic class Tests {\n  @Test\n  public void test() {\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nIn normal way test fail on a first row because first item is not visible and second item will never be touched and verified.\nBut if you want to verify both items you can use Selenide soft assets. In this case Selenide will perform condition verification and then click on both of the items and it some item unavailable for some reason it will generate errors for each fail after test end.\n1. Using TestNG just register listener bypass annotation for test class:\n@Listeners({ SoftAsserts.class})\npublic class Tests {\n  @Test\n  public void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nDon't forget to use dependency \"com.codeborne:selenide-testng\" instead of just \"com.codeborne:selenide\" to use TestNG-specific classes.\n2. Using JUnit4 just describe rule inside test class:\npublic class Tests {\n  @Rule \n  public SoftAsserts softAsserts = new SoftAsserts();\n\n  @Test\n  public void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nDon't forget to use dependency \"com.codeborne:selenide-junit4\" instead of just \"com.codeborne:selenide\" to use JUnit4-specific classes.\n3. Using JUnit5 extend test class:\n@ExtendWith({SoftAssertsExtension.class})\nclass Tests {\n  @Test\n  void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nOr register extension inside test class:\nclass Tests {\n  @RegisterExtension \n  static SoftAssertsExtension softAsserts = new SoftAssertsExtension();\n\n  @Test\n  void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nYou can use the old good dependency \"com.codeborne:selenide\" because it contains JUnit5-specific classes.\nWithout soft assertions you will get report:\nElement not found {#first}\nExpected: visible\n\nScreenshot: file://build/reports/tests/1536060081565.0.png\nPage source: file://build/reports/tests/1536060081565.0.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#first\"}\nWith soft assertions you will get report:\nFAIL #1: Element not found {#first}\nExpected: visible\nScreenshot: file://build/reports/tests/1536060329615.0.png\nPage source: file://build/reports/tests/1536060329615.0.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#first\"}\n\nFAIL #2: Element not found {#second}\nExpected: visible\nScreenshot: file://build/reports/tests/1536060334390.1.png\nPage source: file://build/reports/tests/1536060334390.1.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#second\"}\"\r\nScreenshot: file:/C:/git/qa.quru/build/reports/tests/1677938855374.0.png\r\nPage source: file:/C:/git/qa.quru/build/reports/tests/1677938855374.0.html\r\nTimeout: 4 s.","trace":"Element should have text \"Using JUnit5 extend85 test class:\" {[id=\"wiki-content\"]}\r\nElement: '<div class=\"mt-4\" id=\"wiki-content\">Pages 17\nHome\nBuild script\nCustom conditions\nDo not use getters in tests\nHow Selenide creates WebDriver\nHow to run the browser in MobileEmulation mode\nLazy loading\nPorts of Selenide\nProject structure\nQuick Start\nSafari\nSelenide Roadmap\nSelenide Roadmap 2020\nSelenide vs Selenium\nslf4j\nShow 2 more pages…\nClone this wiki locally\nHow to soft assert using Selenide\nSelenide provide point to perform built in verification softly - this mean that Selenide will skip failed verification and collect all of it and throw error only at the end of test.\nMechanisms:\nTestNG listener - com.codeborne.selenide.testng.SoftAsserts\nJUnit4 rule - com.codeborne.selenide.junit.SoftAsserts\nJUnit5 extension - com.codeborne.selenide.junit5.SoftAssertsExtension\nExample:\nPage with 2 elements, where 2 at invisible\n...\n  <div id='first' style='display:none;'>First</div>\n  <div id='second' style='display:none;'>Second</div>\n...\nAnd use code like this:\npublic class Tests {\n  @Test\n  public void test() {\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nIn normal way test fail on a first row because first item is not visible and second item will never be touched and verified.\nBut if you want to verify both items you can use Selenide soft assets. In this case Selenide will perform condition verification and then click on both of the items and it some item unavailable for some reason it will generate errors for each fail after test end.\n1. Using TestNG just register listener bypass annotation for test class:\n@Listeners({ SoftAsserts.class})\npublic class Tests {\n  @Test\n  public void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nDon't forget to use dependency \"com.codeborne:selenide-testng\" instead of just \"com.codeborne:selenide\" to use TestNG-specific classes.\n2. Using JUnit4 just describe rule inside test class:\npublic class Tests {\n  @Rule \n  public SoftAsserts softAsserts = new SoftAsserts();\n\n  @Test\n  public void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nDon't forget to use dependency \"com.codeborne:selenide-junit4\" instead of just \"com.codeborne:selenide\" to use JUnit4-specific classes.\n3. Using JUnit5 extend test class:\n@ExtendWith({SoftAssertsExtension.class})\nclass Tests {\n  @Test\n  void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nOr register extension inside test class:\nclass Tests {\n  @RegisterExtension \n  static SoftAssertsExtension softAsserts = new SoftAssertsExtension();\n\n  @Test\n  void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nYou can use the old good dependency \"com.codeborne:selenide\" because it contains JUnit5-specific classes.\nWithout soft assertions you will get report:\nElement not found {#first}\nExpected: visible\n\nScreenshot: file://build/reports/tests/1536060081565.0.png\nPage source: file://build/reports/tests/1536060081565.0.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#first\"}\nWith soft assertions you will get report:\nFAIL #1: Element not found {#first}\nExpected: visible\nScreenshot: file://build/reports/tests/1536060329615.0.png\nPage source: file://build/reports/tests/1536060329615.0.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#first\"}\n\nFAIL #2: Element not found {#second}\nExpected: visible\nScreenshot: file://build/reports/tests/1536060334390.1.png\nPage source: file://build/reports/tests/1536060334390.1.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#second\"}</div>'\r\nActual value: text=\"Pages 17\nHome\nBuild script\nCustom conditions\nDo not use getters in tests\nHow Selenide creates WebDriver\nHow to run the browser in MobileEmulation mode\nLazy loading\nPorts of Selenide\nProject structure\nQuick Start\nSafari\nSelenide Roadmap\nSelenide Roadmap 2020\nSelenide vs Selenium\nslf4j\nShow 2 more pages…\nClone this wiki locally\nHow to soft assert using Selenide\nSelenide provide point to perform built in verification softly - this mean that Selenide will skip failed verification and collect all of it and throw error only at the end of test.\nMechanisms:\nTestNG listener - com.codeborne.selenide.testng.SoftAsserts\nJUnit4 rule - com.codeborne.selenide.junit.SoftAsserts\nJUnit5 extension - com.codeborne.selenide.junit5.SoftAssertsExtension\nExample:\nPage with 2 elements, where 2 at invisible\n...\n  <div id='first' style='display:none;'>First</div>\n  <div id='second' style='display:none;'>Second</div>\n...\nAnd use code like this:\npublic class Tests {\n  @Test\n  public void test() {\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nIn normal way test fail on a first row because first item is not visible and second item will never be touched and verified.\nBut if you want to verify both items you can use Selenide soft assets. In this case Selenide will perform condition verification and then click on both of the items and it some item unavailable for some reason it will generate errors for each fail after test end.\n1. Using TestNG just register listener bypass annotation for test class:\n@Listeners({ SoftAsserts.class})\npublic class Tests {\n  @Test\n  public void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nDon't forget to use dependency \"com.codeborne:selenide-testng\" instead of just \"com.codeborne:selenide\" to use TestNG-specific classes.\n2. Using JUnit4 just describe rule inside test class:\npublic class Tests {\n  @Rule \n  public SoftAsserts softAsserts = new SoftAsserts();\n\n  @Test\n  public void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nDon't forget to use dependency \"com.codeborne:selenide-junit4\" instead of just \"com.codeborne:selenide\" to use JUnit4-specific classes.\n3. Using JUnit5 extend test class:\n@ExtendWith({SoftAssertsExtension.class})\nclass Tests {\n  @Test\n  void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nOr register extension inside test class:\nclass Tests {\n  @RegisterExtension \n  static SoftAssertsExtension softAsserts = new SoftAssertsExtension();\n\n  @Test\n  void test() {\n    Configuration.assertionMode = SOFT;\n    open(\"page.html\");\n\n    $(\"#first\").should(visible).click();\n    $(\"#second\").should(visible).click();\n  }\n}\nYou can use the old good dependency \"com.codeborne:selenide\" because it contains JUnit5-specific classes.\nWithout soft assertions you will get report:\nElement not found {#first}\nExpected: visible\n\nScreenshot: file://build/reports/tests/1536060081565.0.png\nPage source: file://build/reports/tests/1536060081565.0.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#first\"}\nWith soft assertions you will get report:\nFAIL #1: Element not found {#first}\nExpected: visible\nScreenshot: file://build/reports/tests/1536060329615.0.png\nPage source: file://build/reports/tests/1536060329615.0.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#first\"}\n\nFAIL #2: Element not found {#second}\nExpected: visible\nScreenshot: file://build/reports/tests/1536060334390.1.png\nPage source: file://build/reports/tests/1536060334390.1.html\nTimeout: 4 s.\nCaused by: NoSuchElementException: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#second\"}\"\r\nScreenshot: file:/C:/git/qa.quru/build/reports/tests/1677938855374.0.png\r\nPage source: file:/C:/git/qa.quru/build/reports/tests/1677938855374.0.html\r\nTimeout: 4 s.\r\n\tat com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:131)\r\n\tat com.codeborne.selenide.commands.Should.execute(Should.java:30)\r\n\tat com.codeborne.selenide.commands.Should.execute(Should.java:14)\r\n\tat com.codeborne.selenide.commands.Commands.execute(Commands.java:154)\r\n\tat com.codeborne.selenide.impl.SelenideElementProxy.dispatchAndRetry(SelenideElementProxy.java:131)\r\n\tat com.codeborne.selenide.impl.SelenideElementProxy.invoke(SelenideElementProxy.java:83)\r\n\tat com.sun.proxy.$Proxy16.shouldHave(Unknown Source)\r\n\tat OpenSelenideSoftAssertionsJunitTest.successfulLoginTest(OpenSelenideSoftAssertionsJunitTest.java:32)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\r\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\r\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\r\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\r\n\tat com.sun.proxy.$Proxy2.stop(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\r\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\r\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)\r\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)\r\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\r\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\r\n"},"stage":"finished","description":"","steps":[],"attachments":[],"parameters":[],"start":1677938845712,"stop":1677938855518}